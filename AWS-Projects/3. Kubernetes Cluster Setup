Kubernetes Cluster Setup:

Install and configure Terraform.
Write Terraform scripts to provision AWS resources (VPC, EC2 instances, etc.).
Deploy a Kubernetes cluster using tools like kops or eksctl.


**Step 1: Set Up Your Environment**

1.1. **Install Terraform**:
   - Install Terraform on your local machine by following the official installation guide: https://learn.hashicorp.com/tutorials/terraform/install-cli

1.2. **Configure AWS CLI**:
   - Install the AWS Command Line Interface (CLI) and configure it with your AWS access and secret keys: https://aws.amazon.com/cli/

**Step 2: Create a Terraform Configuration**

2.1. **Create a Directory**:
   - Create a directory for your Terraform project.

2.2. **Initialize a Terraform Configuration**:
   - Inside your project directory, run `terraform init` to initialize a new Terraform configuration.

**Step 3: Write Terraform Code for AWS Resources**

3.1. **Define Provider and Variables**:
   - Create a `.tf` file (e.g., `main.tf`) to define your AWS provider and variables. Replace the placeholders with your own values:

   ```hcl
   provider "aws" {
     region = "us-west-2"  # Choose your desired AWS region
   }

   variable "key_name" {
     description = "Name of your SSH key pair"
   }

   variable "instance_type" {
     description = "EC2 instance type"
     default     = "t2.micro"
   }
   ```

3.2. **Define AWS Resources**:
   - Add resource definitions for VPC, subnets, security groups, and EC2 instances to your Terraform configuration. Here's a simplified example:

   ```hcl
   resource "aws_vpc" "example" {
     cidr_block = "10.0.0.0/16"
   }

   resource "aws_subnet" "example" {
     count             = 2
     vpc_id            = aws_vpc.example.id
     cidr_block        = "10.0.${count.index}.0/24"
     availability_zone = "us-west-2a"  # Change availability zone
   }

   resource "aws_security_group" "example" {
     name_prefix = "example-"
     vpc_id      = aws_vpc.example.id

     # Define ingress and egress rules
   }

   resource "aws_instance" "example" {
     count           = 2
     ami             = "ami-0c55b159cbfafe1f0"  # Choose an appropriate AMI
     instance_type   = var.instance_type
     key_name        = var.key_name
     subnet_id       = aws_subnet.example[count.index].id
     security_groups = [aws_security_group.example.id]

     # Add user data or provisioning scripts for Kubernetes setup
   }
   ```

3.3. **Create Variables and Outputs**:
   - Define variables and outputs in separate `.tf` files (e.g., `variables.tf` and `outputs.tf`) to keep your configuration organized.

**Step 4: Plan and Apply Terraform Configuration**

4.1. **Initialize Terraform**:
   - Run `terraform init` again to ensure any new variables or providers are properly initialized.

4.2. **Plan Changes**:
   - Run `terraform plan` to preview the changes that Terraform will make to your AWS infrastructure.

4.3. **Apply Changes**:
   - If the plan looks correct, run `terraform apply` to create the AWS resources.

**Step 5: Set Up Kubernetes on the Instances**

5.1. **SSH into Instances**:
   - SSH into the EC2 instances created by Terraform using the key pair you specified in the Terraform configuration:

   ```bash
   ssh -i /path/to/your/private-key.pem ec2-user@instance-public-ip
   ```

5.2. **Install Kubernetes**:
   - Follow the official Kubernetes documentation to install Kubernetes on your instances: https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

**Step 6: Deploy a Basic Application**

6.1. **Create a Kubernetes Deployment**:
   - Create a Kubernetes Deployment YAML file (e.g., `my-app-deployment.yaml`) to deploy a basic application.

   Example YAML:

   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: my-app-deployment
   spec:
     replicas: 3
     selector:
       matchLabels:
         app: my-app
     template:
       metadata:
         labels:
           app: my-app
       spec:
         containers:
           - name: my-app
             image: your-docker-image:tag
             ports:
               - containerPort: 80
   ```

6.2. **Apply the Deployment**:
   - Use `kubectl` to apply the deployment to your Kubernetes cluster:

   ```bash
   kubectl apply -f my-app-deployment.yaml
   ```

Your Kubernetes cluster on AWS should now be up and running, and a basic application should be deployed. You can access the application by exposing it through a Kubernetes service or an Ingress resource, depending on your requirements.
